#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

# Nej den liknar inte den riktiga eeval, den evalar inte ens ngt, men den GER liknande info i outputen
# använd typ $ eeval $((42*18))  (shellen förstör ju allt hsh, så det är nästan lika bra..)

import sys

def str2int(s):
	r = 0
	if s[0] == "%":
		s = s[1:]
		while len(s) > 0:
			r = r * 2
			if s[0] == "1": r = r + 1
			s = s[1:]
	while len(s) > 0:
		r = r * 256 + ord(s[0])
		s = s[1:]
	return r

def bin(val):
	s = ""
	i = 0
	filler = "00000000.00000000.00000000.00000000"
	while val != 0:
		if i == 8:
			s = "." + s
			i = 0
		s = str(val & 1) + s
		nval = val >> 1L
		if (nval == val):
			val = 0
			filler = "11111111.11111111.11111111.11111111"
		else: val = nval
		i += 1
	if len(s) < 35: s = filler[:35-len(s)] + s
	return s;

def ipv4(val):
	s = ""
	for i in (0, 8, 16, 24):
		s = str((val & (255L << i)) >> i) + "." + s
	return s[:-1]

def ascii(val):
	s = '"'
	while val != 0:
		v = val & 255L
		nval = val >> 8
		if (nval == val): val = 0
		else: val = nval
		if v < 32: s = "[7;43m" + chr(v + 64) + "[m" + s
		elif v > 127 and v < 160: s = "[7;46m" + chr(v - 64) + "[m" + s
		else: s = chr(v) + s
	return '"' + s

try: val = int(sys.argv[1])
except: val = str2int(sys.argv[1])

print "Hex    :", hex(val)
print "Octal  :", oct(val)
print "Decimal:", val
print "Binary :", bin(val)
if val < (1L << 32): print "ipv4   :", ipv4(val)
print "ascii  :", ascii(val)
